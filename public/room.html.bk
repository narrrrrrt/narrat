<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>SSE リバーシボード</title>
  <style>
    table { border-collapse: collapse; margin-top: 10px; }
    td {
      border: 1px solid #000;
      width: 30px; height: 30px;
      text-align: center;
    }
    a {
      display: block;
      width: 100%; height: 100%;
      text-decoration: none;
      color: black;
    }
    pre {
      background: #f0f0f0;
      padding: 5px;
      border: 1px solid #ccc;
      white-space: pre-wrap;
    }
  </style>
</head>
<body>
  <h1>SSE リバーシボード</h1>

  <!-- トークン表示 -->
  <p id="token">トークン: （まだなし）</p>

  <!-- 各種情報 -->
  <div id="info">
    <p id="status">ステータス: </p>
    <p id="step">ステップ: </p>
    <p id="black">ブラック: </p>
    <p id="white">ホワイト: </p>
    <p id="qid">ID: </p>
    <p id="qseat">Seat: </p>
  </div>

  <!-- アクション表示 -->
  <p id="action">アクション: （まだなし）</p>

  <!-- ボタン -->
  <div id="actions">
    <button id="joinBtn">Join</button>
    <button id="leaveBtn">Leave</button>
    <button id="resetBtn">Reset</button>
  </div>

  <!-- レスポンス表示 -->
  <pre id="response">レスポンス: （まだなし）</pre>

  <!-- ボード -->
  <div id="board"></div>

  <script>
    // ===== クエリパラメータ取得 =====
    const params = new URLSearchParams(location.search);
    const gameId = params.get("id") || "1";
    let seat     = params.get("seat") || "";   // seat は join 後に role で上書きする
    let currentToken = null;
    let currentStep  = null;

    document.getElementById("qid").innerText   = "ID: " + gameId;
    document.getElementById("qseat").innerText = "Seat: " + seat;

    // ===== SSE 接続 =====
    const sse = new EventSource(`/${gameId}/sse`);

    function renderBoard(data) {
      // ステータス類を表示
      document.getElementById("status").innerText = "ステータス: " + data.status;
      document.getElementById("step").innerText   = "ステップ: " + data.step;
      document.getElementById("black").innerText  = "ブラック: " + data.black;
      document.getElementById("white").innerText  = "ホワイト: " + data.white;

      // ボードを描画
      const boardDiv = document.getElementById("board");
      boardDiv.innerHTML = "";
      const table = document.createElement("table");

      data.board.forEach((row, y) => {
        const tr = document.createElement("tr");
        row.split("").forEach((cell, x) => {
          const td = document.createElement("td");
          const a = document.createElement("a");
          a.href = "#";
          a.innerText = cell;
          a.dataset.x = x;
          a.dataset.y = y;
          a.onclick = (e) => {
            e.preventDefault();
            if (!currentToken) {
              alert("先にJoinしてください");
              return;
            }
            doPost("move", { x: x, y: y, token: currentToken });
          };
          td.appendChild(a);
          tr.appendChild(td);
        });
        table.appendChild(tr);
      });
      boardDiv.appendChild(table);
    }

    // ==== SSE イベント（init は除外） ====
    ["join","move","reset"].forEach(ev => {
      sse.addEventListener(ev, (e) => {
        try {
          const data = JSON.parse(e.data);
          document.getElementById("action").innerText = "アクション: " + ev;
          renderBoard(data);
        } catch (err) {
          console.error("JSON parse error", err, e.data);
        }
      });
    });

    // ==== leave イベント専用 ====
    sse.addEventListener("leave", async (e) => {
      try {
        const data = JSON.parse(e.data);
        document.getElementById("action").innerText = "アクション: leave";
        renderBoard(data);

        // 自分はまだ在席していて、相手が不在になった場合のみ通知
        if (seat && data[seat] === true) {
          const opponent = (seat === "black") ? "white" : "black";
          if (data[opponent] === false) {
            alert("対戦相手が退出しました。");
            if (currentToken) {
              await doPost("leave", { token: currentToken });
              await doPost("join", { seat: seat });
            }
          }
        }
      } catch (err) {
        console.error("JSON parse error", err, e.data);
      }
    });

    // ===== ボタン処理 =====
    async function doPost(action, bodyObj) {
      const res = await fetch(`/${gameId}/${action}`, {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify(bodyObj)
      });
      const json = await res.json();

      // 整形して表示
      document.getElementById("response").innerText =
        "レスポンス:\n" + JSON.stringify(json, null, 2);

      if (json.ok) {
        if (typeof json.step === "number") {
          currentStep = json.step;
          document.getElementById("step").innerText = "ステップ: " + currentStep;
        }
        if (action === "join") {
          currentToken = json.token;
          seat = json.role;
          document.getElementById("token").innerText = "トークン: " + currentToken;
          document.getElementById("qseat").innerText = "Seat: " + seat;
        }
      } else {
        if (json.error) {
          alert(json.error);
        }
      }
    }

    document.getElementById("joinBtn").onclick = () => doPost("join", { seat: seat });
    document.getElementById("leaveBtn").onclick = () => {
      if (!currentToken) {
        alert("先にJoinしてください");
        return;
      }
      doPost("leave", { token: currentToken });
    };
    document.getElementById("resetBtn").onclick = () => doPost("reset", {});
  </script>
</body>
</html>